
; ***************
; * NMI HANDLER *
; ***************
nmi_handler:
	; Save registers
	pha
	txa
	pha
	tya
	pha

	; Increment frame counter
	inc framectr

	; Reset PPU address and VBlank flag
	lda PPUSTATUS

	; Disable PPU rendering to avoid glitches if we run out of VBlank time
	; It's better IMHO to make the screen blink for a single frame, than
	; show a completely screwed up nametable for the whole game duration.
	lda #$00
	sta PPUMASK

	; *****************
	; * Load PPU data *
	; *****************
	;
	; This is an implementation of the PPU buffer explained in "The frame
	; and NMIs" by Disch
	;
	; Page 3 ($0300-$033F) is used as a write buffer, starting at nmippubufpos,
	; (the position at which the NMI thread must start reading), until it
	; reaches ppubufpos (the position after the last byte written by the main
	; thread).
	;
	; Each entry is formed by:
	;  - Byte 0: PPU high address
	;  - Byte 1: PPU low address
	;  - Byte 2: flags
	;    - Bit 7: if set, data is from RLE-encoded data from ROM, else RAM
	;    - Bit 2: if set, increment is 32 (vertical), otherwise 1 (horizontal)
	;
	; If from RAM:
	;  - Byte 3: length
	;  - Byte 4...n: data
	;
	; If from ROM:
	;  - Byte 3: ROM high address
	;  - Byte 4: ROM low address
@doppubufy:
	ldy ppubufreadpos

@doppubuf:
	; If Y is equal (or larger, which should never happen), break
	cpy ppubufpos
	bcs ppubufend

	; Set PPU load address
	lda ppuwritebuf,Y
	iny
	sta PPUADDR
	lda ppuwritebuf,Y
	iny
	sta PPUADDR

	; Load flags
	lax_izy ppuwritebuf
	iny

	; Set vertical/horizontal increase
	and #$04
	sta PPUCTRL

	; Check if from ROM
	txa
	bmi @fromrle

	; Load length
	lax_izy ppuwritebuf,Y
	iny

	; Copy data now
-	lda ppuwritebuf,Y
	sta PPUDATA
	iny
	dex
	bne -

	; Do next
	jmp @doppubuf

@fromrle:
	; Load ROM address
	lda ppuwritebuf,Y
	iny
	sta ppuloadptrh
	lda ppuwritebuf,Y
	iny
	sta ppuloadptrl

	; Save current Y
	sty ppubufreadpos

	; Call RLE load
	jsr ppuloadrle

	; Do next
	jmp @doppubufy

@ppubufend:
	sty ppubufreadpos

	; ***********
	; * Sprites *
	; ***********

	; Update sprite data if needed
	lda #0
	sta OAMADDR
	lda #2
	sta OAMDMA

	; *************
	; * Scrolling *
	; *************

	; We must check if the scroll position has been completely updated to avoid graphical glitches
	lda setscroll
	beq @uselastscroll
	lda #0
	sta setscroll

	; Update scroll, and save for later frames
	lda scrollx
	sta lastscrollx
	sta PPUSCROLL
	lda scrolly
	sta lastscrolly
	sta PPUSCROLL
	jmp @updatedscroll

	; Write last good known scroll position
	; Must be after the last write to PPUADDR due to hardware errata
@uselastscroll:
	lda lastscrollx
	sta PPUSCROLL
	lda lastscrolly
	sta PPUSCROLL
@updatedscroll:

	; We've finished doing graphic stuff, re-enable rendering
	lda maskval
	sta PPUMASK

	; ***************
	; * Controllers *
	; ***************

	; Read controllers using NESdev ring trick
	ldx #1
	stx joy2pressed

	; Strobe shift register
	stx JOY1
	dex
	stx JOY1

	; Read controllers
-	lda JOY1
	lsr A
	rol joy1pressed
	lda JOY2
	lsr A
	rol joy2pressed
	bcc -

	; Re-enable NMI interruptions
	lda #$80
	sta PPUCTRL

	; Restore and return
	pla
	tay
	pla
	tax
	pla
	rti
