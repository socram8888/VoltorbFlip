
; Busy wait for next frame
waitvblank:
	lda framectr
-	cmp framectr
	beq -
	rts

; Turns on display, enabling sprite and background rendering
displayon:
	; Wait one extra frame to ensure the NMI handler has emptied the PPU write
	; buffer before turning on the display
	jsr waitvblank

	lda #$1E
	sta maskval
	jmp waitvblank

; Turns off display by disabling sprite and background rendering
displayoff:
	lda #$00
	sta maskval
	jmp waitvblank

; RLE compression is based on GBA RLUnComp, as seen on NESdev
; https://wiki.nesdev.com/w/index.php/Tile_compression#GBA_RLUnComp
;
; Value | Description
;  00   | End of stream
; 01-7F | Copy next n bytes to PPU backwards
; 80-FF | Repeat the next byte n-125 times
ppuloadrle:
	ldy #0
	lax_izy ppuloadptr

	; If zero, return
	beq @rts

	; If MSB is set, it's 80-FF so it's a run-length
	bmi @runlen

	; Read "n" bytes backwards
	tay
-	lda (ppuloadptr),Y
	sta PPUDATA
	dey
	bne -

	; We've read X+1 bytes
	inx
	txa
	jmp @incptr

@runlen:
	; Substract 125 to X
	; "tax" before "axs" is skipped because "lax" above already made A = X
	axs #125

	; Now copy n - 125 the next read byte
	iny
	lda (ppuloadptr),Y
-	sta PPUDATA
	dex
	bne -

	lda #2

@incptr:
	; A contains the number of read bytes - add it to the data pointer so we
	; can decompress more than 256 bytes
	clc
	adc ppuloadptr+0
	sta ppuloadptr+0
	bcc ppuloadrle
	inc ppuloadptr+1
	jmp ppuloadrle

@rts:
	rts

; Begins a new write to the PPU buffer for "ppubufwritelen" bytes. May lock
; if the PPU buffer doesn't have enough space.
;
; Y is set to the first free position in the write buffer.
ppubufwritebegin:
	ldy ppubufwritepos

@recheck:
	; Check if NMI has finished writing all data to reset the pointers, which
	; is when ppubufreadpos equals to ppubufwritepos.
	cpy ppubufreadpos
	bne @notdone

	; NMI thread processes PPU buffer until the read pointer equals or is greater
	; than the write pointer, so it is very important to clear the later first.
	ldy #0
	sty ppubufwritepos
	sty ppubufreadpos

@notdone:
	; Check if we have enough space in the buffer.
	tya
	clc
	adc ppubufwritelen
	cmp #$40

	; If not, re-run
	bcs @recheck
	rts

ppubufwritesum:
	clc
	lda ppubufwritelen
	adc ppubufwritepos
	sta ppubufwritepos
	rts
